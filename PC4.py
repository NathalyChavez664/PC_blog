# Antes de ejecutar un script de Python en Streamlit debes definir la carpeta donde se encuentra tus archivos
# cd ruta_de_tu_carpeta 
# o abrimos el folder desde visual Studio Code 


# Primero creamos un entorno virtual para instalar Streamlit y otras librer√≠as que necesitemos.
# python -m venv .venv
# Esto nos permite crear un entorno virtual donde instalaremos Streamlit 
# y observaremos la p√°gina web que se est√° generando en este script.

# Luego activamos el entorno virtual.
# En Windows:
# .venv\Scripts\activate
# En MacOS/Linux:
# source .venv/bin/activate

# Acontinuaci√≥n instalamos Streamlit 
# pip install Streamlit

# Este c√≥digo sirve para acceder una p√°gina web en tu navegador que te brinda informaci√≥n sobre Streamlit.
# Pero se ejecuta en la terminal Python de tu computadora, no en Jupyter Notebook.
# python -m streamlit hello

# Este comando sirve para ejecutar un script de Python en Streamlit.
# Pero se ejecuta en la terminal de tu computadora, no en Jupyter Notebook.
# OJO: Debes antes tener instalado Streamlit en tu computadora, debes antes definir la ruta de tus archivos y 
##     tener un script de Python (your_script.py) que quieras ejecutar en Streamlit.
# streamlit run your_script.py
# python -m streamlit run your_script.py

# Este c√≥digo sirve para hacer un primer programa en Streamlit.
import streamlit as st

# Generamos 3 p√°ginas en la aplicaci√≥n web de Streamlit.
# Generamos una p√°gina principal, otra donde contaran su experiencia aprendiendo a programar y una tercera donde presentar√°n sus gr√°ficos.

# Creamos la lista de p√°ginas
paginas = ['Inicio', 'Experiencia', 'Gr√°ficos']

# Creamos botones de navegaci√≥n tomando la lista de p√°ginas
pagina_seleccionada = st.sidebar.selectbox('Selecciona una p√°gina', paginas)

# Generamos condicionales para mostrar el contenido de cada p√°gina
if pagina_seleccionada == 'Inicio':

    # La funci√≥n st.markdown permite centrar y agrandar la letra del t√≠tulo de la web en Streamlit.
    st.markdown("<h1 style='text-align: center;'>Futura publicista vs Python</h1>", unsafe_allow_html=True)

    # <h1 style='text-align: center;'>Nombre de tu blog</h1>: Esto es una cadena de c√≥digo HTML. 
    # La etiqueta <h1> se utiliza para el encabezado principal de una p√°gina web, y 
    # el atributo style se utiliza para agregar estilos CSS. 
    # En este caso, el texto est√° alineado al centro (text-align: center;). 
    # Pueden agregar emojis en el texto de Markdown utilizando c√≥digos de emoji, por ejemplo:
    # <h1 style='text-align: center;'>Aqu√≠ escribe un nombre creativo para tu blog üìù</h1>
    # Tambi√©n pueden personalizar el color del texto utilizando el atributo style, por ejemplo:
    # <h1 style='text-align: center; color: blue;'>Nombre de tu blog</h1>
    # El texto dentro de las etiquetas <h1> ("Aqu√≠ escribe un nombre creativo para tu blog") es el contenido del encabezado.

    # unsafe_allow_html=True: Este es un argumento opcional en la funci√≥n markdown. 
    # Por defecto, streamlit no permite HTML en el texto de Markdown.
    # Sin embargo, establecer unsafe_allow_html en True permite el uso de HTML.

    # Creamos dos columnas separadas para la imagen y el texto
    col1, col2 = st.columns(2)

    # col1, col2 = st.columns(2): Esta l√≠nea est√° creando dos columnas en la interfaz de usuario de la aplicaci√≥n web. 
    # La funci√≥n st.columns toma un n√∫mero entero como argumento que especifica el n√∫mero de columnas que se deben crear. 
    # Las columnas creadas se asignan a las variables col1 y col2.

    # En la primera columna colocamos la imagen de perfil
    col1.image("abc.png", caption='Mi primer ciclo en facultad', width=300)

    # col1.image("ellie.png", caption='Ellie', width=300): Esta l√≠nea est√° colocando una imagen en la primera columna (col1). 
    # La funci√≥n image toma como primer argumento el nombre del archivo de la imagen que se desea mostrar. 
    # En este caso, la imagen es "ellie.png". 
    # El argumento caption se utiliza para proporcionar una etiqueta a la imagen, 
    # en este caso "Aqu√≠ puedes escribir una etiqueta debajo de la imagen". 
    # El argumento width se utiliza para especificar el ancho de la imagen, en este caso 300 p√≠xeles.

    # En la segunda columna colocamos el texto: Debe contener una presentaci√≥n de ustedes
    # Deben presentarse: ¬øQui√©n eres?, ¬øDe d√≥nde eres?, ¬øQu√© estudias?, ¬øQu√© te gusta de tu carrera?, 
    # ¬øQu√© te gustar√≠a hacer en el futuro?, ¬øQu√© te gusta hacer en tu tiempo libre?

    texto = """
    Hola! Soy Nathaly Ch√°vez, estudiante de quinto ciclo de Publicidad y entusiasta de todo lo que combina creatividad, cultura y tecnolog√≠a. Vengo de Lima, Per√∫, y me apasionan los temas que conectan el branding personal con la diversidad cultural y la forma en que nos comunicamos en entornos cada vez m√°s digitales.
    El ciclo pasado desarroll√© una monograf√≠a donde analizo la serie Emily en Par√≠s desde una mirada cr√≠tica y creativa: ¬øc√≥mo influyen la imagen personal y los estereotipos culturales en la percepci√≥n de las marcas? Ese tipo de preguntas son las que me motivan a seguir explorando el poder simb√≥lico de la publicidad.
    Adem√°s, este semestre me enfrent√© por primera vez al mundo de la programaci√≥n con Python. Al principio fue intimidante, pero luego, entre Google Colab, gr√°ficos interactivos y Visual Studio, descubr√≠ que programar tambi√©n puede ser una herramienta creativa para visualizar datos, entender patrones y narrar ideas desde otro √°ngulo. Fue como descubrir otro lenguaje, uno que tambi√©n comunica.
    En el futuro me gustar√≠a especializarme en dise√±o visual, branding estrat√©gico y producci√≥n digital, combinando lo conceptual con lo t√©cnico. Sue√±o con desarrollar campa√±as que no solo impacten, sino que tambi√©n representen contextos reales y diversas formas de ser.
    Y cuando no estoy creando, analizando o programando, me encanta caminar con mi perrita, jugar con apps de edici√≥n, armar playlists que reflejan estados de √°nimo y, de vez en cuando, so√±ar despierta con tener mi propio estudio creativo ‚ú®
    """

    # Las comillas triples (""") en Python se utilizan para definir cadenas multil√≠nea.
    
    # Mostramos el texto
    col2.markdown(f"<div style='text-align: justify; font-size: 15px;'>{texto}</div>", unsafe_allow_html=True)

    # <div style='text-align: justify; font-size: 15px;'>{texto}</div>: Esta es una cadena de c√≥digo HTML. 
    # La etiqueta <div> se utiliza para agrupar contenido en HTML. 
    # En este caso, el texto est√° justificado (text-align: justify;). 
    # El tama√±o de la fuente se establece en 15 p√≠xeles (font-size: 15px;).
    # El texto dentro de las etiquetas <div> es la variable texto.
    # f"": Esto es un f-string en Python.
    # Permite insertar el valor de una variable directamente en la cadena. 
    # En este caso, {texto} se reemplaza por el valor de la variable texto.

elif  pagina_seleccionada == 'Experiencia':

    # Agregamos un t√≠tulo
    st.markdown("<h1 style='text-align: center;'>Mi experiencia aprendiendo a programar üíª</h1>", unsafe_allow_html=True)

    # En esta secci√≥n debes describir y comentar tu experiencia aprendiendo a programar
    # ¬øC√≥mo te sentiste al principio?, 
    # ¬øQu√© te ha ense√±ado la programaci√≥n?, ¬øQu√© te gusta de programar?, 
    # ¬øQu√© te gustar√≠a hacer con la programaci√≥n en el futuro? 

    # Agregar un  texto para la respuesta
    texto_2 = """
    Al inicio del curso, aprender a programar me generaba mucha ansiedad porque era la primera vez que ve√≠a Python y no sab√≠a bien por d√≥nde empezar. Todo me sonaba muy t√©cnico y complicado, como si fuera un lenguaje completamente ajeno a m√≠. Sin embargo, a medida que avanzaban las clases y comenzaba a practicar, especialmente en Google Colab, fui perdiendo miedo. Colab me pareci√≥ bastante accesible para principiantes, ya que no necesitaba instalar nada y pod√≠a ir ejecutando por bloques, lo que facilitaba mucho el proceso de prueba y error.
    Despu√©s empec√© a usar Visual Studio Code, y aunque al principio fue un poco m√°s t√©cnico de configurar (como activar entornos virtuales o instalar paquetes), me ayud√≥ a entender mejor c√≥mo funciona realmente Python en mi computadora y me dio m√°s control sobre lo que estaba haciendo. Esa transici√≥n me hizo sentir que estaba avanzando hacia un nivel m√°s serio en la programaci√≥n.
    La programaci√≥n me ha ense√±ado a pensar de forma m√°s l√≥gica y ordenada, y sobre todo, a ser paciente conmigo misma cuando algo no sale a la primera. Me gusta que programar te permite crear soluciones a problemas reales, desde algo peque√±o como automatizar una tarea hasta visualizar datos de forma interactiva. En el futuro me gustar√≠a usar la programaci√≥n como una herramienta complementaria a mi carrera, quiz√°s para desarrollar proyectos interactivos, analizar datos de campa√±as o incluso crear visualizaciones creativas en medios digitales.
    """

    # Mostramos el texto
    st.markdown(f"<div style='text-align: justify; font-size: 21px;'>{texto_2}</div>", unsafe_allow_html=True)

    # <div style='text-align: justify; font-size: 15px;'>{texto_2}</div>: Esta es una cadena de c√≥digo HTML.
    # La etiqueta <div> se utiliza para agrupar contenido en HTML.
    # En este caso, el texto est√° justificado (text-align: justify;).
    # El tama√±o de la fuente se establece en 15 p√≠xeles (font-size: 15px;).
    # El texto dentro de las etiquetas <div> es la variable texto_2.
    # f"": Esto es un f-string en Python.
    # Permite insertar el valor de una variable directamente en la cadena. 
    # En este caso, {texto_2} se reemplaza por el valor de la variable texto.

    # Agregamos un subt√≠tulo para el video
    st.markdown("<h2 style='text-align: center;'>Siempre hay una primera vez para todo, atr√©vete!!!</h2>", unsafe_allow_html=True)
    
    # <h2 style='text-align: center;'>Aqu√≠ escribe un nombre creativo para presentar tu video</h2>: Esta es una cadena de c√≥digo HTML.
    # La etiqueta <h2> se utiliza para un encabezado de segundo nivel en una p√°gina web.
    # El texto est√° centrado (text-align: center;).
    # El texto dentro de las etiquetas <h2> ("Aqu√≠ escribe un nombre creativo para presentar tu video") es el contenido del encabezado.
    # unsafe_allow_html=True: Este es un argumento opcional en la funci√≥n markdown.
    # Por defecto, streamlit no permite HTML en el texto de Markdown.
    # Sin embargo, establecer unsafe_allow_html en True permite el uso de HTML.
    # Puedes agregar emojis en el texto de Markdown utilizando c√≥digos de emoji.
    # Por ejemplo, puedes agregar un emoji de video üé• 

    # Agregamos un video realizado en las practicas anteriores
    st.video("https://www.youtube.com/watch?v=X_Z7d04x9-E")

    # st.video("https://www.youtube.com/watch?v=X_Z7d04x9-E"): Esta l√≠nea est√° mostrando un video en la aplicaci√≥n web.
    # La funci√≥n video toma como primer argumento la URL del video que se desea mostrar.
    # En este caso, la URL es "https://www.youtube.com/watch?v=X_Z7d04x9-E".
    # Puedes cambiar la URL por la de tu video en YouTube o en otra plataforma de video.

    # O creamos un bot√≥n para ir al enlace del video con button
    st.markdown(f"<div style='text-align: center;'><a href='https://drive.google.com/file/d/1DW2CPiUE9YyIJKcj-UX-uL6APp8wuim5/view?usp=sharing' target='_blank'><button>Mi video PC1</button></a></div>", unsafe_allow_html=True) 
    st.markdown(f"<div style='text-align: center;'><a href='https://drive.google.com/file/d/1jhA_7SI3BQrz7TRb3wIIcg272MgB6rOW/view?usp=sharing' target='_blank'><button>Mi video PC2</button></a></div>", unsafe_allow_html=True) 

    # <div style='text-align: center;'><a href='https://drive.google.com/file/d/1REvRXSu3GuGD73w8j44135MkRiezd0gP/view?usp=drive_link' target='_blank'><button>Ver video</button></a></div>:
    # Esta es una cadena de c√≥digo HTML.
    # La etiqueta <div> se utiliza para agrupar contenido en HTML.
    # En este caso, el contenido est√° centrado (text-align: center;).
    # La etiqueta <a> se utiliza para crear un enlace.
    # El atributo href especifica la URL a la que se dirige el enlace.
    # En este caso, la URL es 'https://drive.google.com/file/d/1REvRXSu3GuGD73w8j44135MkRiezd0gP/view?usp=drive_link'.
    # El atributo target='_blank' indica que el enlace se abrir√° en una nueva pesta√±a del navegador.
    # La etiqueta <button> se utiliza para crear un bot√≥n.
    # El texto dentro de las etiquetas <button> ("Ver video") es el contenido del bot√≥n.
    # unsafe_allow_html=True: Este es un argumento opcional en la funci√≥n markdown.
    # Por defecto, streamlit no permite HTML en el texto de Markdown.
    # Sin embargo, establecer unsafe_allow_html en True permite el uso de HTML.
    # Puedes cambiar la URL por la de tu video en YouTube o en otra plataforma de video.
    
else:

    # Agregamos un t√≠tulo para la p√°gina de gr√°ficos
    st.markdown("<h1 style='text-align: center;'>Mis primeros gr√°ficos de muchos</h1>", unsafe_allow_html=True)

    # Creamos una lista de gr√°ficos
    graficos = ['Gr√°fico de barras verticales de cantidad de idiomas por familia ling√º√≠stica', 'Gr√°fico circular sobre distribuci√≥n de pel√≠culas y series', 'Mapa interactivo de familias ling√º√≠sticas por ubicaci√≥n geogr√°fica']

    # Creamos un cuadro de selecci√≥n en la p√°gina de gr√°ficos
    grafico_seleccionado = st.selectbox('Selecciona un gr√°fico', graficos)

    # El cuadro de selecci√≥n se crea con la funci√≥n selectbox.
    # El primer argumento es el texto que se muestra en el cuadro de selecci√≥n.
    # El segundo argumento es una lista de opciones que se pueden seleccionar.
    # En este caso, las opciones son los elementos de la lista graficos.
    # La opci√≥n seleccionada se asigna a la variable grafico_seleccionado.
    # La variable grafico_seleccionado se utiliza para mostrar el gr√°fico correspondiente en la aplicaci√≥n web.
    

    # Mostramos el gr√°fico seleccionado
    if grafico_seleccionado == 'Gr√°fico de barras verticales de cantidad de idiomas por familia ling√º√≠stica':
        st.markdown("<div style='text-align: justify; font-size: 20px;'>El gr√°fico de barras muestra que la familia quechua es la m√°s representada, con 12 lenguas identificadas. Le sigue la familia arawak, con 9 lenguas, y luego la categor√≠a NK (no clasificado), con 7 lenguas. El resto de familias ling√º√≠sticas, como Zaparoan, Harakmbut, Chicham, J√≠baro, Pano-Tacanan, Sechuran y otras, presentan entre 1 y 3 lenguas cada una. Este panorama refleja una distribuci√≥n desigual, donde unas pocas familias concentran la mayor parte de las lenguas identificadas, mientras muchas otras est√°n representadas por una sola lengua.</div>", unsafe_allow_html=True)
        st.image("imagen.png", caption='Gr√°fico de lenguas aisladas', width=500)
        pass
    elif grafico_seleccionado == 'Gr√°fico circular sobre distribuci√≥n de pel√≠culas y series':
        st.markdown("<div style='text-align: justify; font-size: 20px;'>La distribuci√≥n de contenido revela una predominancia clara de las pel√≠culas, que representan el 69.6% del total, frente al 30.4% de las series. Esta desproporci√≥n evidencia una orientaci√≥n marcada hacia el formato cinematogr√°fico, lo cual podr√≠a responder a una estrategia de producci√≥n m√°s √°gil, menor compromiso de continuidad y una mayor facilidad de distribuci√≥n global. A pesar del auge de las series en la era del streaming, el formato pel√≠cula sigue dominando ampliamente el cat√°logo.", unsafe_allow_html=True)
        st.image("grafico.png", caption='Gr√°fico de familias ling√º√≠sticas', width=500)
        pass
    elif grafico_seleccionado == 'Mapa interactivo de familias ling√º√≠sticas por ubicaci√≥n geogr√°fica':
        st.markdown("<div style='text-align: justify; font-size: 20px;'>El mapa muestra la distribuci√≥n territorial de las lenguas ind√≠genas seg√∫n su familia ling√º√≠stica. Cada marcador representa una lengua ubicada en el lugar donde se habla, e indica a qu√© familia pertenece. Al observar el mapa, se nota que las lenguas quechuas est√°n concentradas principalmente en la zona andina, mientras que las lenguas de la familia arawak se extienden por regiones amaz√≥nicas. Familias con menos lenguas, como Harakmbut o Zaparoan, aparecen de forma m√°s aislada, generalmente en puntos espec√≠ficos de la selva. En conjunto, el mapa permite ver que la diversidad ling√º√≠stica del Per√∫ no solo es amplia, sino tambi√©n geogr√°ficamente dispersa, y que cada familia tiene una distribuci√≥n particular en el territorio.</div>", unsafe_allow_html=True)
        # Si "mapa_cusco.html" es un archivo HTML (no una imagen), debes mostrarlo con st.components.v1.html
        import streamlit.components.v1 as components
        with open("mapa_linguistico.html", "r", encoding="utf-8") as f:
            html_content = f.read()
        components.html(html_content, height=500)
        pass

    # if grafico_seleccionado == 'Gr√°fico de barras verticales de lenguas aisladas':
    # st.markdown("<div style='text-align: justify; font-size: 20px;'>Aqu√≠ debe ir una breve interpretaci√≥n de tu gr√°fico</div>", unsafe_allow_html=True)
    # st.image("aisladas_base_datos.png", caption='Gr√°fico de lenguas aisladas', width=500): Esta l√≠nea est√° mostrando una imagen en la aplicaci√≥n web.
    # La funci√≥n image toma como primer argumento el nombre del archivo de la imagen que se desea mostrar.
    # En este caso, la imagen es "aisladas_base_datos.png".
    # El argumento caption se utiliza para proporcionar una etiqueta a la imagen,
    # en este caso "Gr√°fico de lenguas aisladas".
    # El argumento width se utiliza para especificar el ancho de la imagen, en este caso 500 p√≠xeles.

    # elif grafico_seleccionado == 'mapa_cusco':
    # import streamlit.components.v1 as components
    # with open("mapa_cusco.html", "r", encoding="utf-8") as f:
    #     html_content = f.read()
    # components.html(html_content, height=500): Esta l√≠nea est√° mostrando un archivo HTML en la aplicaci√≥n web.
    # La funci√≥n components.html toma como primer argumento el contenido HTML que se desea mostrar.
    # En este caso, el contenido HTML se lee desde el archivo "mapa_cusco.html".
    # El argumento height se utiliza para especificar la altura del contenido HTML, en este caso 500 p√≠xeles.
    
    # Si no tenemos el archivo HTML, podemos agregar el c√≥digo para crear el mapa de Cusco directamente en Streamlit.
    # Primero debes crear el diccionario de coordenadas del mapa de Cusco.
    # Luego debes crear el mapa utilizando la librer√≠a folium y streamlit-folium.
    # pip install folium
    # pip install streamlit-folium
        #import folium
        #from streamlit_folium import st_folium

        # Mostrar el mapa en Streamlit
        #st_folium(mapa_cusco, width=700, height=500)
    